{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "effd5ae7",
   "metadata": {},
   "source": [
    "# Pron√≥sticos Mundial - Graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8098e930",
   "metadata": {},
   "source": [
    "**Date**: 1122"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "543b448e",
   "metadata": {},
   "source": [
    "**Data source**: https://www.kaggle.com/datasets/martj42/international-football-results-from-1872-to-2017?resource=download"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8bb98d1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "701a1e24",
   "metadata": {},
   "outputs": [],
   "source": [
    "encode = 'ISO-8859-16'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9570827d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/jpolanco/Desktop/aws\n"
     ]
    }
   ],
   "source": [
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ede0ca0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "path = \"/Users/jpolanco/Downloads/archive/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe003fb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>file</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>results.csv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>shootouts.csv</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            file\n",
       "1    results.csv\n",
       "0  shootouts.csv"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "files = os.listdir(path)\n",
    "files = pd.DataFrame({\"file\":files})\n",
    "files = files.loc[files['file'] != '.DS_Store']\n",
    "\n",
    "files.sort_values(by='file').tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b6ac214e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>home_score</th>\n",
       "      <th>away_score</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1872-11-30</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1873-03-08</td>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1874-03-07</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1875-03-06</td>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1876-03-04</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date home_team away_team  home_score  away_score tournament     city  \\\n",
       "0  1872-11-30  Scotland   England         0.0         0.0   Friendly  Glasgow   \n",
       "1  1873-03-08   England  Scotland         4.0         2.0   Friendly   London   \n",
       "2  1874-03-07  Scotland   England         2.0         1.0   Friendly  Glasgow   \n",
       "3  1875-03-06   England  Scotland         2.0         2.0   Friendly   London   \n",
       "4  1876-03-04  Scotland   England         3.0         0.0   Friendly  Glasgow   \n",
       "\n",
       "    country  neutral  \n",
       "0  Scotland    False  \n",
       "1   England    False  \n",
       "2  Scotland    False  \n",
       "3   England    False  \n",
       "4  Scotland    False  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db = pd.read_csv(path+\"results.csv\")\n",
    "db.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8c6d9a35",
   "metadata": {},
   "outputs": [],
   "source": [
    "db[\"date\"] = pd.to_datetime(db[\"date\"], format=\"%Y-%m-%d\").dt.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c3e9e142",
   "metadata": {},
   "outputs": [],
   "source": [
    "#db_2 = pd.read_csv(path+\"shootouts.csv\")\n",
    "#db_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0361ce9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>home_score</th>\n",
       "      <th>away_score</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21634</th>\n",
       "      <td>1998</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>FIFA World Cup</td>\n",
       "      <td>Saint-Denis</td>\n",
       "      <td>France</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21635</th>\n",
       "      <td>1998</td>\n",
       "      <td>Morocco</td>\n",
       "      <td>Norway</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>FIFA World Cup</td>\n",
       "      <td>Montpellier</td>\n",
       "      <td>France</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21636</th>\n",
       "      <td>1998</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>Austria</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>FIFA World Cup</td>\n",
       "      <td>Toulouse</td>\n",
       "      <td>France</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21637</th>\n",
       "      <td>1998</td>\n",
       "      <td>Italy</td>\n",
       "      <td>Chile</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>FIFA World Cup</td>\n",
       "      <td>Bordeaux</td>\n",
       "      <td>France</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21638</th>\n",
       "      <td>1998</td>\n",
       "      <td>France</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>FIFA World Cup</td>\n",
       "      <td>Marseille</td>\n",
       "      <td>France</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       date home_team     away_team  home_score  away_score      tournament  \\\n",
       "21634  1998    Brazil      Scotland         2.0         1.0  FIFA World Cup   \n",
       "21635  1998   Morocco        Norway         2.0         2.0  FIFA World Cup   \n",
       "21636  1998  Cameroon       Austria         1.0         1.0  FIFA World Cup   \n",
       "21637  1998     Italy         Chile         2.0         2.0  FIFA World Cup   \n",
       "21638  1998    France  South Africa         3.0         0.0  FIFA World Cup   \n",
       "\n",
       "              city country  neutral  \n",
       "21634  Saint-Denis  France     True  \n",
       "21635  Montpellier  France     True  \n",
       "21636     Toulouse  France     True  \n",
       "21637     Bordeaux  France     True  \n",
       "21638    Marseille  France    False  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = db[(db[\"tournament\"] == \"FIFA World Cup\")&(db[\"date\"] >= 1998)]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "18874d7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Brazil',\n",
       " 'Morocco',\n",
       " 'Cameroon',\n",
       " 'Italy',\n",
       " 'France',\n",
       " 'Paraguay',\n",
       " 'Saudi Arabia',\n",
       " 'South Korea',\n",
       " 'Netherlands',\n",
       " 'Spain']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Hist√≥ricos\n",
    "unique_countries = pd.DataFrame(list(df.home_team.unique())+list(df.away_team.unique())).drop_duplicates()[0].tolist()\n",
    "unique_countries[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6af5a249",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Qatar 2022\n",
    "qatar = [\"Qatar\", \"Ecuador\", \"Senegal\", \"Netherlands\",\n",
    "         \"England\", \"Iran\", \"United States\", \"Wales\",\n",
    "         \"Argentina\", \"Saudi Arabia\", \"Mexico\", \"Poland\",\n",
    "         \"France\", \"Australia\", \"Denmark\", \"Tunisia\",\n",
    "         \"Spain\", \"Costa Rica\", \"Germany\", \"Japan\",\n",
    "         \"Belgium\", \"Canada\", \"Morocco\", \"Croatia\",\n",
    "         \"Brazil\", \"Serbia\", \"Switzerland\", \"Cameroon\",\n",
    "         \"Portugal\", \"Ghana\", \"Uruguay\", \"South Korea\"\n",
    "        ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a28e8a1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Wales', 'Canada', 'Qatar']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(set(qatar).difference(unique_countries))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ff947f60",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/dc/glgt2cgj2r37zhhr4wjp9_880000gq/T/ipykernel_96602/1392304595.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df['dif_goals'] = df['home_score']-df['away_score']\n"
     ]
    }
   ],
   "source": [
    "df['dif_goals'] = df['home_score']-df['away_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4570a93d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    42.968750\n",
       "0.0    23.958333\n",
       "2.0    18.489583\n",
       "3.0     9.635417\n",
       "4.0     2.604167\n",
       "5.0     1.302083\n",
       "6.0     0.520833\n",
       "8.0     0.260417\n",
       "7.0     0.260417\n",
       "Name: dif_goals, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of goal difference\n",
    "(df['dif_goals'].abs().value_counts()/df['dif_goals'].abs().value_counts().sum())*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f1f627e",
   "metadata": {},
   "source": [
    "## Social Network Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "22fb0b59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>dif_goals</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21634</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21635</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>Norway</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21636</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>Austria</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21637</th>\n",
       "      <td>Italy</td>\n",
       "      <td>Chile</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21638</th>\n",
       "      <td>France</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      home_team     away_team  dif_goals\n",
       "21634    Brazil      Scotland        1.0\n",
       "21635   Morocco        Norway        0.0\n",
       "21636  Cameroon       Austria        0.0\n",
       "21637     Italy         Chile        0.0\n",
       "21638    France  South Africa        3.0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2 = df[['home_team','away_team','dif_goals']]\n",
    "df_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1e1b0784",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of unique countries: 64\n",
      "No. of connections: 322\n"
     ]
    }
   ],
   "source": [
    "import networkx as nx\n",
    "\n",
    "G = nx.from_pandas_edgelist(df_2,\n",
    "                           source='home_team',\n",
    "                           target='away_team',\n",
    "                           edge_attr='dif_goals')\n",
    "\n",
    "print(\"No. of unique countries:\", len(G.nodes))\n",
    "print(\"No. of connections:\", len(G.edges))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c1982a9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Local cdn resources have problems on chrome/safari when used in jupyter-notebook. \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"1000\"\n",
       "            height=\"600px\"\n",
       "            src=\"example.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x7ff0c31218e0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import pyvis\n",
    "from pyvis.network import Network\n",
    "# create vis network\n",
    "net = Network(notebook=True, width=1000, height=600)\n",
    "# load the networkx graph\n",
    "net.from_nx(G)\n",
    "net.repulsion()\n",
    "# show\n",
    "net.show(\"example.html\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23924f64",
   "metadata": {},
   "source": [
    "**Degree of centrality**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "856abf32",
   "metadata": {},
   "outputs": [],
   "source": [
    "deg_cen = {}\n",
    "graphs=[G]\n",
    "\n",
    "for g in graphs:\n",
    "    deg_cen[g] = nx.degree_centrality(g)\n",
    "\n",
    "g_1 = pd.DataFrame(deg_cen)\n",
    "g_1 = g_1.reset_index()\n",
    "g_1.columns = ['node','degree_centrality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "856a2da8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>degree_centrality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>0.396825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Germany</td>\n",
       "      <td>0.396825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>France</td>\n",
       "      <td>0.365079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>England</td>\n",
       "      <td>0.349206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Spain</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>0.317460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>0.301587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Japan</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>0.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>0.269841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>0.269841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>0.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>United States</td>\n",
       "      <td>0.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Australia</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Costa Rica</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0.190476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>0.190476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Iran</td>\n",
       "      <td>0.174603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Serbia</td>\n",
       "      <td>0.174603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Tunisia</td>\n",
       "      <td>0.158730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>0.158730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Poland</td>\n",
       "      <td>0.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>0.126984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>0.095238</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             node  degree_centrality\n",
       "7          Brazil           0.396825\n",
       "21        Germany           0.396825\n",
       "20         France           0.365079\n",
       "19        England           0.349206\n",
       "54          Spain           0.333333\n",
       "53    South Korea           0.317460\n",
       "2       Argentina           0.301587\n",
       "33    Netherlands           0.285714\n",
       "31         Mexico           0.285714\n",
       "30          Japan           0.285714\n",
       "14        Croatia           0.285714\n",
       "42       Portugal           0.269841\n",
       "63        Uruguay           0.269841\n",
       "16        Denmark           0.222222\n",
       "62  United States           0.222222\n",
       "3       Australia           0.206349\n",
       "13     Costa Rica           0.206349\n",
       "5         Belgium           0.206349\n",
       "56    Switzerland           0.206349\n",
       "46   Saudi Arabia           0.190476\n",
       "9        Cameroon           0.190476\n",
       "26           Iran           0.174603\n",
       "49         Serbia           0.174603\n",
       "59        Tunisia           0.158730\n",
       "17        Ecuador           0.158730\n",
       "22          Ghana           0.142857\n",
       "41         Poland           0.142857\n",
       "48        Senegal           0.126984\n",
       "32        Morocco           0.095238"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g_1 = g_1[g_1['node'].isin(qatar)].sort_values(by=\"degree_centrality\",ascending=False)\n",
    "g_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec4d786e",
   "metadata": {},
   "source": [
    "**Betweenness Centrality**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "541c3906",
   "metadata": {},
   "outputs": [],
   "source": [
    "# N√∫mero de veces que un nodo act√∫a como puente a lo largo del camino m√°s corto entre otros dos nodos\n",
    "betw_cen = {}\n",
    "\n",
    "for g in graphs:\n",
    "    betw_cen[g] = nx.betweenness_centrality(g)\n",
    "\n",
    "g_2 = pd.DataFrame(betw_cen)\n",
    "g_2 = g_2.reset_index()\n",
    "g_2.columns = ['node','betweenness_centrality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "72f13f87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>betweenness_centrality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>0.108152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>England</td>\n",
       "      <td>0.080135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Spain</td>\n",
       "      <td>0.071574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>France</td>\n",
       "      <td>0.064188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Germany</td>\n",
       "      <td>0.056851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>0.045942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>0.044701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>0.044522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Japan</td>\n",
       "      <td>0.041715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>0.038013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>0.035998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>0.029580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>0.028190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Costa Rica</td>\n",
       "      <td>0.021431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>0.021280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>United States</td>\n",
       "      <td>0.020563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>0.018426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>0.018035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Iran</td>\n",
       "      <td>0.017744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>0.017598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0.014923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Tunisia</td>\n",
       "      <td>0.013784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Australia</td>\n",
       "      <td>0.013105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>0.007833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0.006934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Serbia</td>\n",
       "      <td>0.006916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>0.006779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Poland</td>\n",
       "      <td>0.005358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>0.004357</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             node  betweenness_centrality\n",
       "7          Brazil                0.108152\n",
       "19        England                0.080135\n",
       "54          Spain                0.071574\n",
       "20         France                0.064188\n",
       "21        Germany                0.056851\n",
       "2       Argentina                0.045942\n",
       "14        Croatia                0.044701\n",
       "53    South Korea                0.044522\n",
       "30          Japan                0.041715\n",
       "42       Portugal                0.038013\n",
       "63        Uruguay                0.035998\n",
       "31         Mexico                0.029580\n",
       "33    Netherlands                0.028190\n",
       "13     Costa Rica                0.021431\n",
       "56    Switzerland                0.021280\n",
       "62  United States                0.020563\n",
       "16        Denmark                0.018426\n",
       "5         Belgium                0.018035\n",
       "26           Iran                0.017744\n",
       "9        Cameroon                0.017598\n",
       "46   Saudi Arabia                0.014923\n",
       "59        Tunisia                0.013784\n",
       "3       Australia                0.013105\n",
       "32        Morocco                0.007833\n",
       "22          Ghana                0.006934\n",
       "49         Serbia                0.006916\n",
       "17        Ecuador                0.006779\n",
       "41         Poland                0.005358\n",
       "48        Senegal                0.004357"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g_2 = g_2[g_2['node'].isin(qatar)].sort_values(by=\"betweenness_centrality\",ascending=False)\n",
    "g_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cde8201",
   "metadata": {},
   "source": [
    "**Eigen Vector Centrality**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c19381a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Responde qu√© tan importante es un nodo dentro de la red social\n",
    "eig_cen = {}\n",
    "for g in graphs:\n",
    "    eig_cen[g] = nx.eigenvector_centrality(g)\n",
    "\n",
    "g_3 = pd.DataFrame(eig_cen)\n",
    "g_3 = g_3.reset_index()\n",
    "g_3.columns = ['node','eigenvector_centrality']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6f69209a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Germany</td>\n",
       "      <td>0.276493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>France</td>\n",
       "      <td>0.246697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>0.234769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>0.216105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>0.213599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>England</td>\n",
       "      <td>0.211290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>0.202866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>0.202742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>0.195887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>0.187860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>0.187418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Spain</td>\n",
       "      <td>0.181116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Japan</td>\n",
       "      <td>0.160639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Australia</td>\n",
       "      <td>0.157420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>0.155295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>0.149746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>United States</td>\n",
       "      <td>0.146597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Costa Rica</td>\n",
       "      <td>0.138126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>0.136530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>0.128303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Serbia</td>\n",
       "      <td>0.126793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>0.125260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Iran</td>\n",
       "      <td>0.112368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0.111628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0.109340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Poland</td>\n",
       "      <td>0.100071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Tunisia</td>\n",
       "      <td>0.079399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>0.078703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>0.054777</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             node  eigenvector_centrality\n",
       "21        Germany                0.276493\n",
       "20         France                0.246697\n",
       "7          Brazil                0.234769\n",
       "31         Mexico                0.216105\n",
       "53    South Korea                0.213599\n",
       "19        England                0.211290\n",
       "14        Croatia                0.202866\n",
       "33    Netherlands                0.202742\n",
       "2       Argentina                0.195887\n",
       "42       Portugal                0.187860\n",
       "63        Uruguay                0.187418\n",
       "54          Spain                0.181116\n",
       "30          Japan                0.160639\n",
       "3       Australia                0.157420\n",
       "16        Denmark                0.155295\n",
       "5         Belgium                0.149746\n",
       "62  United States                0.146597\n",
       "13     Costa Rica                0.138126\n",
       "9        Cameroon                0.136530\n",
       "56    Switzerland                0.128303\n",
       "49         Serbia                0.126793\n",
       "17        Ecuador                0.125260\n",
       "26           Iran                0.112368\n",
       "46   Saudi Arabia                0.111628\n",
       "22          Ghana                0.109340\n",
       "41         Poland                0.100071\n",
       "59        Tunisia                0.079399\n",
       "48        Senegal                0.078703\n",
       "32        Morocco                0.054777"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g_3 = g_3[g_3['node'].isin(qatar)].sort_values(by=\"eigenvector_centrality\",ascending=False)\n",
    "g_3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aad2e826",
   "metadata": {},
   "source": [
    "## K-Means+SNA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b9229902",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/dc/glgt2cgj2r37zhhr4wjp9_880000gq/T/ipykernel_96602/1819177132.py:7: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n",
      "  A=nx.adjacency_matrix(G_p1)\n",
      "<class 'networkx.utils.decorators.argmap'> compilation 16:4: FutureWarning: laplacian_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n"
     ]
    }
   ],
   "source": [
    "# Pre-processing\n",
    "G_p1=graphs[0]\n",
    "\n",
    "# Eliminando nodos que no participar√°n en 2022\n",
    "G_p1.remove_nodes_from(list(set(unique_countries).difference(qatar)))\n",
    "\n",
    "A=nx.adjacency_matrix(G_p1)\n",
    "L = nx.laplacian_matrix(G_p1).astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "620ddb2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NodeView(('Brazil', 'Morocco', 'Cameroon', 'France', 'Saudi Arabia', 'Denmark', 'South Korea', 'Mexico', 'Netherlands', 'Belgium', 'Spain', 'Argentina', 'Japan', 'Croatia', 'Serbia', 'Iran', 'England', 'Tunisia', 'Germany', 'United States', 'Senegal', 'Uruguay', 'Ecuador', 'Costa Rica', 'Poland', 'Portugal', 'Australia', 'Ghana', 'Switzerland'))"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "G_p1.nodes()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f19ff88f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sp\n",
    "w,v = sp.sparse.linalg.eigsh(L, k = 10, which='SM')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "999a1cb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<frozen importlib._bootstrap>:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject\n"
     ]
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "X = v*w\n",
    "\n",
    "kmeans = KMeans(init='k-means++', n_clusters=10, n_init=10)\n",
    "kmeans.fit_predict(X)\n",
    "\n",
    "centroids = kmeans.cluster_centers_\n",
    "labels = kmeans.labels_\n",
    "error = kmeans.inertia_\n",
    "\n",
    "#fig = plt.subplots(1, figsize=(12,10))\n",
    "#colors = ['#d7191c', '#ffffbf', '#2b83ba']\n",
    "#node_colors = [colors[labels[v]] for v in G_p1.nodes()]\n",
    "#nx.draw(G_p1, node_color=node_colors, with_labels='True')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8508d8bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Iran</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Australia</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Germany</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>England</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Japan</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Serbia</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Poland</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Costa Rica</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>United States</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>France</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Spain</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Tunisia</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             node  group\n",
       "15           Iran      0\n",
       "0          Brazil      1\n",
       "26      Australia      1\n",
       "18        Germany      1\n",
       "16        England      1\n",
       "13        Croatia      1\n",
       "12          Japan      1\n",
       "8     Netherlands      1\n",
       "14         Serbia      1\n",
       "2        Cameroon      1\n",
       "1         Morocco      1\n",
       "5         Denmark      1\n",
       "4    Saudi Arabia      2\n",
       "24         Poland      3\n",
       "23     Costa Rica      4\n",
       "22        Ecuador      4\n",
       "25       Portugal      5\n",
       "21        Uruguay      5\n",
       "19  United States      5\n",
       "9         Belgium      5\n",
       "3          France      5\n",
       "6     South Korea      5\n",
       "11      Argentina      5\n",
       "10          Spain      5\n",
       "7          Mexico      5\n",
       "17        Tunisia      6\n",
       "20        Senegal      7\n",
       "28    Switzerland      8\n",
       "27          Ghana      9"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k_ex = pd.DataFrame()\n",
    "\n",
    "k_ex['node'] = pd.DataFrame(G_p1.nodes())\n",
    "k_ex['group'] = pd.DataFrame(kmeans.fit_predict(X))\n",
    "\n",
    "k_ex.sort_values(by='group')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c75148a",
   "metadata": {},
   "source": [
    "**Centralidad vs Grupos**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a20e6e5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Iran</td>\n",
       "      <td>0.112368</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Germany</td>\n",
       "      <td>0.276493</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>0.234769</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>England</td>\n",
       "      <td>0.211290</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>0.202866</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>0.202742</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Japan</td>\n",
       "      <td>0.160639</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Australia</td>\n",
       "      <td>0.157420</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>0.155295</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>0.136530</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Serbia</td>\n",
       "      <td>0.126793</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>0.054777</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0.111628</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Poland</td>\n",
       "      <td>0.100071</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Costa Rica</td>\n",
       "      <td>0.138126</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>0.125260</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>France</td>\n",
       "      <td>0.246697</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>0.216105</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>0.213599</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>0.195887</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>0.187860</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>0.187418</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Spain</td>\n",
       "      <td>0.181116</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>0.149746</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>United States</td>\n",
       "      <td>0.146597</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Tunisia</td>\n",
       "      <td>0.079399</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>0.078703</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>0.128303</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0.109340</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             node  eigenvector_centrality  group\n",
       "22           Iran                0.112368      0\n",
       "0         Germany                0.276493      1\n",
       "2          Brazil                0.234769      1\n",
       "5         England                0.211290      1\n",
       "6         Croatia                0.202866      1\n",
       "7     Netherlands                0.202742      1\n",
       "12          Japan                0.160639      1\n",
       "13      Australia                0.157420      1\n",
       "14        Denmark                0.155295      1\n",
       "18       Cameroon                0.136530      1\n",
       "20         Serbia                0.126793      1\n",
       "28        Morocco                0.054777      1\n",
       "23   Saudi Arabia                0.111628      2\n",
       "25         Poland                0.100071      3\n",
       "17     Costa Rica                0.138126      4\n",
       "21        Ecuador                0.125260      4\n",
       "1          France                0.246697      5\n",
       "3          Mexico                0.216105      5\n",
       "4     South Korea                0.213599      5\n",
       "8       Argentina                0.195887      5\n",
       "9        Portugal                0.187860      5\n",
       "10        Uruguay                0.187418      5\n",
       "11          Spain                0.181116      5\n",
       "15        Belgium                0.149746      5\n",
       "16  United States                0.146597      5\n",
       "26        Tunisia                0.079399      6\n",
       "27        Senegal                0.078703      7\n",
       "19    Switzerland                0.128303      8\n",
       "24          Ghana                0.109340      9"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resumen = pd.merge(g_3,k_ex,on='node',how='left').sort_values(by=['group','eigenvector_centrality'], \n",
    "                                                    ascending=[True,False])\n",
    "\n",
    "resumen"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3b74a72",
   "metadata": {},
   "source": [
    "## Fase de Grupos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0391c8a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [\"Qatar\", \"Ecuador\", \"Senegal\", \"Netherlands\"]\n",
    "b = [\"England\", \"Iran\", \"United States\", \"Wales\"]\n",
    "c = [\"Argentina\", \"Saudi Arabia\", \"Mexico\", \"Poland\"]\n",
    "d = [\"France\", \"Australia\", \"Denmark\", \"Tunisia\"]\n",
    "e = [\"Spain\", \"Costa Rica\", \"Germany\", \"Japan\"]\n",
    "f = [\"Belgium\", \"Canada\", \"Morocco\", \"Croatia\"]\n",
    "g = [\"Brazil\", \"Serbia\", \"Switzerland\", \"Cameroon\"]\n",
    "h = [\"Portugal\", \"Ghana\", \"Uruguay\", \"South Korea\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44990e10",
   "metadata": {},
   "source": [
    "**A**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "721b0c21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Netherlands</td>\n",
       "      <td>0.202742</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>0.125260</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>0.078703</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           node  eigenvector_centrality  group\n",
       "7   Netherlands                0.202742      1\n",
       "21      Ecuador                0.125260      4\n",
       "27      Senegal                0.078703      7"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_g = resumen[resumen['node'].isin(a)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "a_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b475b3b6",
   "metadata": {},
   "source": [
    "**B**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "19167542",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>England</td>\n",
       "      <td>0.211290</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>United States</td>\n",
       "      <td>0.146597</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Iran</td>\n",
       "      <td>0.112368</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             node  eigenvector_centrality  group\n",
       "5         England                0.211290      1\n",
       "16  United States                0.146597      5\n",
       "22           Iran                0.112368      0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b_g = resumen[resumen['node'].isin(b)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "b_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de2f9d83",
   "metadata": {},
   "source": [
    "**C**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1b5f0c1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mexico</td>\n",
       "      <td>0.216105</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>0.195887</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Saudi Arabia</td>\n",
       "      <td>0.111628</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Poland</td>\n",
       "      <td>0.100071</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            node  eigenvector_centrality  group\n",
       "3         Mexico                0.216105      5\n",
       "8      Argentina                0.195887      5\n",
       "23  Saudi Arabia                0.111628      2\n",
       "25        Poland                0.100071      3"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_g = resumen[resumen['node'].isin(c)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "c_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526a5b83",
   "metadata": {},
   "source": [
    "**D**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0e3d96f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>France</td>\n",
       "      <td>0.246697</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Australia</td>\n",
       "      <td>0.157420</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Denmark</td>\n",
       "      <td>0.155295</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Tunisia</td>\n",
       "      <td>0.079399</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         node  eigenvector_centrality  group\n",
       "1      France                0.246697      5\n",
       "13  Australia                0.157420      1\n",
       "14    Denmark                0.155295      1\n",
       "26    Tunisia                0.079399      6"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d_g = resumen[resumen['node'].isin(d)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "d_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1299aa",
   "metadata": {},
   "source": [
    "**E**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a870078d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Germany</td>\n",
       "      <td>0.276493</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Spain</td>\n",
       "      <td>0.181116</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Japan</td>\n",
       "      <td>0.160639</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Costa Rica</td>\n",
       "      <td>0.138126</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          node  eigenvector_centrality  group\n",
       "0      Germany                0.276493      1\n",
       "11       Spain                0.181116      5\n",
       "12       Japan                0.160639      1\n",
       "17  Costa Rica                0.138126      4"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_g = resumen[resumen['node'].isin(e)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "e_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de8dcdca",
   "metadata": {},
   "source": [
    "**F**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "e0496969",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Croatia</td>\n",
       "      <td>0.202866</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>0.149746</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Morocco</td>\n",
       "      <td>0.054777</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       node  eigenvector_centrality  group\n",
       "6   Croatia                0.202866      1\n",
       "15  Belgium                0.149746      5\n",
       "28  Morocco                0.054777      1"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_g = resumen[resumen['node'].isin(f)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "f_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3de36ff2",
   "metadata": {},
   "source": [
    "**G**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4cfbf45d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>0.234769</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Cameroon</td>\n",
       "      <td>0.136530</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Switzerland</td>\n",
       "      <td>0.128303</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Serbia</td>\n",
       "      <td>0.126793</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           node  eigenvector_centrality  group\n",
       "2        Brazil                0.234769      1\n",
       "18     Cameroon                0.136530      1\n",
       "19  Switzerland                0.128303      8\n",
       "20       Serbia                0.126793      1"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g_g = resumen[resumen['node'].isin(g)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "g_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6c74eb7",
   "metadata": {},
   "source": [
    "**H**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9418f930",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>node</th>\n",
       "      <th>eigenvector_centrality</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>South Korea</td>\n",
       "      <td>0.213599</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>0.187860</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>0.187418</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0.109340</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           node  eigenvector_centrality  group\n",
       "4   South Korea                0.213599      5\n",
       "9      Portugal                0.187860      5\n",
       "10      Uruguay                0.187418      5\n",
       "24        Ghana                0.109340      9"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h_g = resumen[resumen['node'].isin(h)].sort_values(by=\"eigenvector_centrality\", ascending=False)\n",
    "h_g"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6bee0d2",
   "metadata": {},
   "source": [
    "## 16avos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a3a27a44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Netherlands\n"
     ]
    }
   ],
   "source": [
    "if a_g.iloc[0,]['eigenvector_centrality']>b_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_49 = a_g.iloc[0,]\n",
    "    print(\"The winner is \"+a_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_49 = b_g.iloc[1,]\n",
    "    print(\"The winner is \"+b_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "11d4f872",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Mexico\n"
     ]
    }
   ],
   "source": [
    "if c_g.iloc[0,]['eigenvector_centrality']>d_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_50 = c_g.iloc[0,]\n",
    "    print(\"The winner is \"+c_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_50 = d_g.iloc[1,]\n",
    "    print(\"The winner is \"+d_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "70200b0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Germany\n"
     ]
    }
   ],
   "source": [
    "if e_g.iloc[0,]['eigenvector_centrality']>f_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_53 = e_g.iloc[0,]\n",
    "    print(\"The winner is \"+e_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_53 = f_g.iloc[1,]\n",
    "    print(\"The winner is \"+f_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0904abbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Brazil\n"
     ]
    }
   ],
   "source": [
    "if g_g.iloc[0,]['eigenvector_centrality']>h_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_54 = g_g.iloc[0,]\n",
    "    print(\"The winner is \"+g_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_54 = h_g.iloc[1,]\n",
    "    print(\"The winner is \"+h_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dab48d1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is England\n"
     ]
    }
   ],
   "source": [
    "if b_g.iloc[0,]['eigenvector_centrality']>a_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_51 = b_g.iloc[0,]\n",
    "    print(\"The winner is \"+b_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_51 = a_g.iloc[1,]\n",
    "    print(\"The winner is \"+a_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "e46eeb8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is France\n"
     ]
    }
   ],
   "source": [
    "if d_g.iloc[0,]['eigenvector_centrality']>c_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_52 = d_g.iloc[0,]\n",
    "    print(\"The winner is \"+d_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_52 = c_g.iloc[1,]\n",
    "    print(\"The winner is \"+c_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f716cc78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Croatia\n"
     ]
    }
   ],
   "source": [
    "if f_g.iloc[0,]['eigenvector_centrality']>e_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_55 = f_g.iloc[0,]\n",
    "    print(\"The winner is \"+f_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_55 = e_g.iloc[1,]\n",
    "    print(\"The winner is \"+e_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "eb1e24ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is South Korea\n"
     ]
    }
   ],
   "source": [
    "if h_g.iloc[0,]['eigenvector_centrality']>g_g.iloc[1,]['eigenvector_centrality']:\n",
    "    m_56 = h_g.iloc[0,]\n",
    "    print(\"The winner is \"+h_g.iloc[0,]['node'])\n",
    "else:\n",
    "    m_56 = g_g.iloc[1,]\n",
    "    print(\"The winner is \"+g_g.iloc[1,]['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01cbfb6b",
   "metadata": {},
   "source": [
    "## Cuartos de Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "2280d30a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Mexico\n"
     ]
    }
   ],
   "source": [
    "if m_49['eigenvector_centrality']>m_50['eigenvector_centrality']:\n",
    "    m_57 = m_49\n",
    "    print(\"The winner is \"+m_49['node'])\n",
    "else:\n",
    "    m_57 = m_50\n",
    "    print(\"The winner is \"+m_50['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "6c755d95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Germany\n"
     ]
    }
   ],
   "source": [
    "if m_53['eigenvector_centrality']>m_54['eigenvector_centrality']:\n",
    "    m_58 = m_53\n",
    "    print(\"The winner is \"+m_53['node'])\n",
    "else:\n",
    "    m_58 = m_54\n",
    "    print(\"The winner is \"+m_54['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "7395f59d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is France\n"
     ]
    }
   ],
   "source": [
    "if m_51['eigenvector_centrality']>m_52['eigenvector_centrality']:\n",
    "    m_59 = m_51\n",
    "    print(\"The winner is \"+m_51['node'])\n",
    "else:\n",
    "    m_59 = m_52\n",
    "    print(\"The winner is \"+m_52['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "10af14ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is South Korea\n"
     ]
    }
   ],
   "source": [
    "if m_55['eigenvector_centrality']>m_56['eigenvector_centrality']:\n",
    "    m_60 = m_55\n",
    "    print(\"The winner is \"+m_55['node'])\n",
    "else:\n",
    "    m_60 = m_56\n",
    "    print(\"The winner is \"+m_56['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbb50e5e",
   "metadata": {},
   "source": [
    "## Semi-Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3d484944",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Germany\n"
     ]
    }
   ],
   "source": [
    "if m_57['eigenvector_centrality']>m_58['eigenvector_centrality']:\n",
    "    m_61 = m_57\n",
    "    print(\"The winner is \"+m_57['node'])\n",
    "else:\n",
    "    m_61 = m_58\n",
    "    print(\"The winner is \"+m_58['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b3525468",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is France\n"
     ]
    }
   ],
   "source": [
    "if m_59['eigenvector_centrality']>m_60['eigenvector_centrality']:\n",
    "    m_62 = m_59\n",
    "    print(\"The winner is \"+m_59['node'])\n",
    "else:\n",
    "    m_62 = m_60\n",
    "    print(\"The winner is \"+m_60['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e867e77",
   "metadata": {},
   "source": [
    "## Final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "359c2795",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The winner is Germany\n"
     ]
    }
   ],
   "source": [
    "if m_61['eigenvector_centrality']>m_62['eigenvector_centrality']:\n",
    "    print(\"The winner is \"+m_61['node'])\n",
    "else:\n",
    "    print(\"The winner is \"+m_62['node'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f729ed6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac9630cf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "554f0c30",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
